Trong Java, sắp xếp với Arrays sử dụng

	 + Arrays.sort(int[]) - tham số là mảng KDL nguyên thủy
  	 					  - chỉ hỗ trợ sắp xếp tăng dần
  	 
  	 + Arrays.sort(Object[]) - tham số là mảng KDL đối tượng
  	 						 - bất kỳ KDL đối tượng nào nhưng phải là con của Conparable<...>
  	 						 để quy ước tăng/giảm dần
  	 						 - tự xử lý null values
  	 						 - Note: Tất cả các KDL đối tượng có sẵng của Java đều đã được
  	 						 implements Comparable và override hàm compareTo
  	 	Hạn chế: override compareTo của Comparable để đưa ra công thức asc/desc nhưng với mảng
  	 	X chỉ hỗ trợ một kiểu sắp xếp
  	 	VD: muốn tăng theo id, override tăng theo id
  	 			 giảm dần theo name, override giảm theo name
  	 		--> công thức tăng theo id không còn hoạt động
  	 + Arrays.sort(T[], Comparator<T>)
  	   - T[]: mảng đối tượng
  	   - Comparator<T>: là 1 functional interface có hàm trừu tượng là int compare(T1,T2)
  	   					--> Áp dụng 100% giống IntComp, StringComp, ItemComp
  	   - Với mảng đối tượng sắp xếp theo nhiều công thức khác nhau
  	   - Sắp xếp tăng/giảm dựa vào Comparator strategy --> không dùng Comparable ...




==============================================================================================
Mục đích của phần xử lý mảng

+ Khai báo, khởi tạo mảng

+ Duyệt mảng

+ Xử lý các dạng logic với tập hợp các phần tử

+ Ôn lại phần Strategy Pattern

+ Thuật toán sắp xếp
  --> Sử dụng thuật toán truyền thống
  --> Áp dụng sort function có sẵn
  
+ Sắp xếp là tìm cách duyệt, hoán vị các phần tử trong danh sách để đảm bảo các phần tử là tăng/giảm
dần theo yêu cầu
--> Thuật toán: Bubble, Insertion, Selection, Quick Sort
--> Sắp xếp cho
	1. Mảng số nguyên/số thực (KDL NT) tăng/giảm dần
	2. Mảng KDL đối tượng (String/Integer) có sẵn - nullable
	3. Mảng KDL đối tượng tự tạo ra
	   VD: Sắp xếp id tăng dần trong mảng Item
	   			   name giảm dần
	   			   salesPrice tăng dần, name giảm dần 