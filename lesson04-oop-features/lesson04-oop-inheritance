3. Tính chất thừa kế (Inheritance)
Định nghĩa:
--> Khi trong code analyse có các TYPE(class/interface/abstract class)
có các thuộc tính | & phương thức chung -->  tạo ra KDL cha sau đó cho các KDL con thừa kế, thực thi

+ Class entends Class
	--> Khi các KDL con có chung thuộc tính
	--> Class con không bắt buộc phải override các method từ Class cha
	--> ** Chứa các hàm bình thường(body)
==> Class chỉ được phép extends duy nhất từ 1 [Abstract] Class

+ Class implements Interface
	--> Khi các KDL con có chung phương thức
	--> Các phương thức [trừu tượng] đó bắt buộc phải override ở KDL con
	--> ** Chứa các hàm trừu tượng(no body)
==> Class có thể implements nhiều InterFace
	
+  Class entexds Abstract_Class
	--> Khi các KDL con có chung thuộc tính hoặc | & phương thức
	--> Các phương thức có 1 số bắt buộc 1 số là không
	--> ** Chứa các hàm bình thường (body) và hàm trừu tượng (no body)

+ Interface extends Interface
	--> Interface con có thể thừa kế(thêm) các hàm trừu tượng từ Interface cha
	
+ Abstract_class implements Interface
	--> Không bắt buộc phải override các hàm trừu tượng từ Interface
	--> Các abstract methods từ interface trở thành các abstract methods trong Abstract_class
	
----- Trong Java có hỗ trợ tính chất đa thừa kế hay không -------
+ Thừa kế : Class con entends Class cha
+ Thực thi: Class con implement Interface cha
--> Tương đương - Trong Java class con có thể thừa kế(extends) từ nhiều class cha được không
--> Không
--> Vì khi 1 class con extends từ 1 class cha ko bắt buộc phải override hàm từ class cha	
	+ Ví dụ Father có hàm cooking, Mother cũng có hàm cooking
	+ Child extends Father, Mother đồng thời không override
	+ child.cooking() sẽ không biết thừa kế, gọi từ class cha/mẹ nào

=======================================
Từ Java08 trở đi, có 1 vài cập nhập cho interface
+ JDK 1.0 - 1.7 --> interface chỉ được phép chứa hàm trừu tượng
+ >~ JDK 1.8 	--> interface có thể chứa hàm trừu tượng và hàm bình thường

	