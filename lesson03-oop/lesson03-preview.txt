1. Các hướng xây dựng, phát triển, giải quyết 1 bài toán trong lập trình

+ FOP(Functional Oriented Programming): Lập trình hướng chức năng(hàm)
  --> Khi code 1 bài toán, xem bài toán như là 1 chức năng
      rồi chia nhỏ chức năng đó thành cách chức năng nhỏ hơn để giải quyết
  --> 1 bài toán là 1 hàm lớn -> chứa/gọi các hàm nhỏ hơn
  
Hạn chế: Vì các hàm gọi lẫn nhau, nếu 1 hàm xảy ra lỗi kéo theo cả hệ thống
         Dữ liệu dùng chung, ko có phân quyền dữ liệu
         

+ OOP(Object Oriented Programing): Lập trình hướng đối tượng(chứa 1 hoặc nhiều thông tin bên trong)
  --> System = Tập hợp các Object
  --> Object = attribute(s)   + method(s)
             = data structure + function
             
VD: Bài toán quản lý cửa hàng thời trang
+ Bài toán sẽ có những đối tượng: 
+ Mặt Hàng
  --> Lưu trữ: mã mặt hàng, tên mặt hàng, giá bán, giá mua, số lượng, kích cỡ
  --> Chức năng: liệt kê các mặt hàng, tìm kiếm, chọn để bán ...
+ Đơn Hàng
  --> Lưu trữ: mã đơn hàng, danh sách các mặt hàng, số lượng, tổn tiền, khách hàng ... 
  --> Chức năng: tạo đơn hàng, xuất hóa đơn, thanh toán offline/online ...
  
+ AOP(Aspect Object Programing): Lập trình hướng khía cạnh
  --> xây dựng phát triển trong các thư viện, framework
  --> khi gọi/thực thi 1 chức năng, chức năng đó sẽ được thực thi tự động
      kèm với 1/n chức năng(khía cạnh) khác theo cấu hình

VD: Ngôn ngữ JDBC/JPA-Hibernate: Database Connection
+ Chức năng chuyển/nhận tiền qua các app ngân hàng, làm 2 việc

+ Đăng nhập
+ Người chuyển: Trừ số tiền từ tài khoản --> hamA()
+ Người nhận:   Nhận được số tiền --> hamB()
--> Vấn đề: lỗi mạng, ứng dụng bị lỗi: số tiền từ ng chuyển bị trừ, ng nhận lại chưa nhận được
--> commit, rollback

hamChuyenTien() {
   hamA();
   hamB();
}

--> cấu hình sao đó để khi gọi hàm hamChuyenTien()
--> nếu có lỗi xảy ra thì gọi lệnh hàm rollback đến trả về lại giữ liệu ban đầu   
--> nếu thực thi ok -> commit lưu dữ liệu


+ --> CronJob(QuartJob): Cấu hình 1 chức năng sẽ được thực thi ở thời điểm nào đó 



=========== OOP trong Java =================
+ Object: là khái niệm dùng để mô tả các thực thể trong thế giới thực
          thông tin rõ ràng cụ thể, phân biện được vs các thực thể khác --> đối tượng
          VD: 2 chiếc xe hơi khác màu sắc, hãng xe, số chỗ ngồi
          
+ Class: là khái niệm trừu tượng dùng để chỉ tập hợp các đối tượng có chung thuộc tính, phương thức
         VD: 2 chiếc xe hơi khác màu sắc, hãng xe, số chỗ ngồi
             -> mỗi đối tượng xe có thể có màu sắc, hãng xe, số chỗ ngồi giống khác nhau
                nhưng đều có thông tin: màu sắc, hãng xe, số chỗ ngồi
         class Car: color, model, noSeats
--> khái niệm class, object chỉ mang tính chất tương đối
    1 class cũng có thể là 1 object hay ngược lại trong các trường hợp khác nhau
    
VD: XeHoi: XeXanh, XeVang, XeDo
    PhuongTien: XeHoi, XeDap, XeMay
    
---> CODE: Class: attributes(thuộc tính) + methods(phương thức)
           --> gọi hàm khởi tạo từ class
               --> tạo ra Object

Class
---------------------------
+ Attribute
  --> Thông thương sẽ khai báo là private
  --> Lý do: nếu để public thì sẽ được truy cập từ bất cứ nơi nào
  			 rơi vào hạn chế của FOP, ko phân quyền dữ liệu quản lý cho từng đối tượng
  	  Vấn đề: tạo 1 class ra, dùng nó ở nhiều nơi cho bài toán
  	  		  private	-> ko truy cập được
  	  		  getter	-> truy cập lất giá trị của thuộc tính
  	  		  setter	-> truy cập gán, cập nhật lại gái trị của thuộc tính mà ko làm mất đi cấu trúc dữ liệu của 1 class
  	  		  class A {
  	  		  	//public List<Item> itemts = new ArrayList<>(); //dynamic array (mảng động - có thể thêm sửa xóa)
  	  		  	private List<Item> itemts = new ArrayList<>();
  	  		  	
  	  		  	public List<Item> getItems(){
  	  		  		return items;
  	  		  	}
  	  		  	
  	  		  	public void add(Item item){
  	  		  		items.add(item);
  	  		  	}
  	  		  }
  	  		 
+ Constructor: hàm khởi tạo
	--> khởi tạo đối tượng cho class, thông qua từ khóa new
	--> tạo ra 1 ô nhớ tại vùng nhớ HEAP
	
				--> A a1 = new A();
  	  			--> a1.items = Arrays.asList(...); --> items -> fixed-length array
  	  			--> a1.add()
+ getter/setter
	--> lấy/cập nhật giá trị cho thuộc tính của đối tượng
	--> đối tượng đó phải tồn tại, có giá trị ở HEAP rồi
  
+ toString
	--> được gọi tự động khi in ra biến của class 	

---------------------------
Từ khóa static
--> static attribute
	// non-static: thuộc phạm vi đối tượng
	// static	 : thuộc phạm vi class, dùng chung cho tất cả đối tượng của class

--> static method
	// non-static: nếu hàm phụ thuộc vào đối tượng đang gọi
				 : phu thuộc = với mỗi đối tượng khác nhau, khi gọi hàm kết quả có thể khác nhau
				 
	// static	 : nếu hàm không phụ thuộc vào đối tượng đang gọi
				 : không phụ thuộc = dùng bất kỳ đối tượng nào gọi cũng ko ảnh hưởng đến kết quả của hàm

--> thứ tự khởi tạo trước sau của static/non attribute, method
	lúc runtime, class khởi tọa trước -> tạo ra các đối tượng từ class nếu có
	--> static method/attribute sẽ được khởi tạo trước
		--> non-static method/attribute sẽ được khởi tạo khi có tạo ra đối tượng


--> static class
