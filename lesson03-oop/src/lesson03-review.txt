1. Các hướng xây dựng, phát triển, giải quyết 1 bài tóan trong lập trình

+ FOP(Functional Oriented Programming): Lập trình hướng chức năng, hàm
	--> Khi code 1 bài toán, xem bài toán đó như là 1 chức năng 
		Rồi chia nhỏ chức năng đó thành các chức năng nhỏ hơn để giải quyết
	--> 1 bài toán là 1 hàm lớn -> chứa/gọi các hàm nhỏ hơn
	
Hạn chế: Vì các hàm gọi lẫn nhau, nếu 1 hàm xảy ra lỗi kéo theo cả hệ thống 
		 Dữ liệu dùng chung, không có phân quyền dữ liệu
		 
+ OOP(Object Oriented Programming): Lập trình hướng đối tượng(chứa 1 hoặc nhiều thông tin bên trong)
 	--> System = Tập hợp các Object
 	--> Object = attribute(s) + method(s)
 			   = data structure + function
VD: Bài toán quản lý cửa hàng thời trang
+ Bài toán sẽ có những đối tượng: 
+ Mặt Hàng
	--> Lưu trữ : mã mặt hàng, tên mặt hàng, giá bán, giá mua, số lượng ,kích cỡ
	--> Chức năng: Liệt kê các mặt hàng, tìm kiếm, chọn để bán ...
+ Đơn Hàng
	--> Lữu trữ : mã đơn hàng, danh sách các mặt hàng, số lượng, tổng tiền, khách hàng nào,......
	--> Chức năng: tạo đơn hàng,xuất hóa đơn, thanh toán offline/online
	
+ AOP(Aspect Object Programming):Lập trình hướng khía cạnh
	--> xây dựng phát triển trong các thư viện, framework
	--> khi gọi/ thực thi 1 chức năng, chức năng đó sẽ được thực thi tự động
		kèm với 1/n chức năng(khía cạnh) khác theo cấu hình
		
VD:Ngôn ngữ JDBC/JPA-Hibernate: Database Connnection
+ Chức năng chuyển/nhận tiền qua các app ngân hàng, làm 2 việc

+Đăng nhập


+ Người chuyển: Trừ số tiền từ tài khoản -->hamA()
+ Người nhận: Nhận được số tiền -->hamB()
--> Vấn đề: Lỗi mạng, ứng dụng bị lỗi:Số tiền từ người chuyển bị trừ, người nhận lại chưa nhận được
-->commit, rollback

hamChuyenTien(){
	hamA();
	hamB();
}

--> cấu hình sao đó để khi gọi hàm hamChuyenTien(),nếu có lỗi xảy ra thì gọi lệnh hàm rollback đến trả về giữ liệu ban đầu
--> nếu thực thi ok -> commit lưu dữ liệu



+ --> CronJob(QuartJob):Cấu hình 1 chức năng sẽ được thực thi ở thời điểm nào đó 






===================== OOP trong java =========================
+ Object: là khái niệm dùng để mô tả các thực thể trong thế giới thực
		  thông tin rõ ràng cụ thể, phân biệt được với các thực thể khác --> đối tượng
		  VD:2 chiếc xe hơi khác màu sắc,hãng xe, số chỗ ngồi
+ Class: là khái niệm trừu tượng dùng để chỉ tập hợp các đối tượng có chung thuộc tính, phương thức
		 VD:2 chiếc xe hơi khác màu sắc,hãng xe, số chỗ ngồi 
		 	-> mỗi đối tượng xe có thể màu sắc,hãng xe, số chỗ ngồi giống hoặc khác nhau
		 	->nhưng đều có thông tin:màu sắc, hãng xe, số chỗ ngồi
		 class Car: color, model,noSeats
--> khái niệm class, object chỉ mang tính chất tương đối
	1 class cũng có thể là 1 object hay ngược lại trong các trường hợp khác nhau
	
VD: XeHoi:Xexanh, XeVang, XeDo
	PhuongTien: XeHoi, XeDap, XeMay
	
---> CODE: Class: attributes +methods
		   --> gọi hàm khởi tạo từ class
		   		-->tạo ra object



